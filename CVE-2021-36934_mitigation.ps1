# Fix HiveNightmare ACLs and snapshots

# Forked from https://github.com/GossiTheDog/HiveNightmare

# Schedule to run as SYSTEM in a deployment tool, test locally first
# Do not run on Windows Server in case you use VSS for backups

# $checkPermissions = icacls c:\Windows\System32\config\sam
# if ($checkPermissions -like '*BUILTIN\Users:(I)(RX*)*') {

[cmdletbinding()]    

param()

#Requires -RunAsAdministrator

$OutputFile = "$($env:temp)\$($env:computername)_CVE-2021-36934_report.txt"
$SnapshotsRemovedFlagFile = "$($env:temp)\$($env:computername)_CVE-2021-36934_SnapshotsRemoved.txt"
Write-Host $OutputFile
$Version = 'CVE-2021-36934_mitigation 1.2'
$AllOk = '[All Ok]'
$AllFixedStr = '[All fixed]'


function Get-CVE-2021-36934_Vulnerable_ACLE {
    $filenames = @('SAM','SECURITY','SYSTEM')
    $forbiden = @('BUILTIN\Users','VORDEFINIERT\Benutzer','VORDEFINIERT\Users')
    foreach ($n in $filenames) {
        try {
            $fullFileName = "$($env:windir)\system32\config\$n"
            $acl = (get-acl $fullFileName -ErrorAction Stop).access.IdentityReference
            Write-Verbose "$fullFileName ==> $acl" 
        } catch {
            return $Error[0].Exception.Message
        }
        $notAllowed = $acl | Where-Object {$forbiden -contains $_}
        if ($notAllowed -ne $null) {
            return [string]$notAllowed
        }
    }
    return ''    
}

function RemoveShadowCopies {
    param(
        [string]$LogFile,
        [string]$FlagFile,
        [switch]$CreateVSC
    )
    Write-Verbose 'Removing volume shadow copies ...'
    vssadmin delete shadows /quiet /all
    Start-Sleep -Seconds 3
    if (((Get-CimInstance Win32_ShadowStorage).UsedSpace) -eq 0) {
        '[VSS Ok] Successfully deleted old volume shadow copies.' | Tee-Object -FilePath $LogFile -Append
        Get-Date | Tee-Object -FilePath $FlagFile -Append
        if ( $CreateVSC ) {
            # create new shadow copy
            if ($vulnerable -eq $true -and $shadowSucces -eq $true -and $permissionsSucces -eq $true) {
                wmic shadowcopy call create Volume='C:\'
            }
        }
        return $true
    } else {
        '[VSS FAILED]' | Tee-Object -FilePath $LogFile -Append
        return $false
    }    
}


$WrongACL = Get-CVE-2021-36934_Vulnerable_ACLE

if ([string]::IsNullOrEmpty($WrongACL)) {
    if (!(Test-Path $SnapshotsRemovedFlagFile)) { RemoveShadowCopies -LogFile $OutputFile -FlagFile $SnapshotsRemovedFlagFile -CreateVSC }
    if (!(Test-Path -LiteralPath $OutputFile)) {
        $Version | Tee-Object -FilePath $OutputFile
    }
    if ( (Get-Content $OutputFile -Tail 1) -ne $AllOk ) {
        $AllOk | Tee-Object -FilePath $OutputFile -Append
    } else { $AllOk }  
} else {
    $Version | Tee-Object -FilePath $OutputFile
    $WrongACL | Tee-Object -FilePath $OutputFile -Append
    icacls "$($env:windir)\system32\config\*.*" /inheritance:e
    
    $AllFixed = $true
    
    '=== Mitigation results ===' | Tee-Object -FilePath $OutputFile -Append
    if ( [string]::IsNullOrEmpty( (Get-CVE-2021-36934_Vulnerable_ACLE) ) ) { 
        '[ACL Ok] Files permissions are correct.' | Tee-Object -FilePath $OutputFile -Append 
    } else {
        $AllFixed = $false
        '[ACL FAILED]' | Tee-Object -FilePath $OutputFile -Append 
    }

    if ( !(RemoveShadowCopies -LogFile $OutputFile -FlagFile $SnapshotsRemovedFlagFile -CreateVSC:$AllFixed) ) { $AllFixed = $false }

    if ($AllFixed) { $AllFixedStr | Tee-Object -FilePath $OutputFile -Append }
}






